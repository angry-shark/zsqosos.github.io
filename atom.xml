<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhangs&#39;blog</title>
  <subtitle>我与我周旋久，宁作我</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zsqosos.github.io/"/>
  <updated>2017-06-19T14:28:38.211Z</updated>
  <id>http://zsqosos.github.io/</id>
  
  <author>
    <name>Zhangs</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>大白话谈互联网协议</title>
    <link href="http://zsqosos.github.io/posts/program/20170619-internet-protocol/"/>
    <id>http://zsqosos.github.io/posts/program/20170619-internet-protocol/</id>
    <published>2017-06-19T14:17:54.000Z</published>
    <updated>2017-06-19T14:28:38.211Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ooo.0o0.ooo/2017/06/19/5947df3d363a4.png" alt=""></p>
<h2 id="你的问题"><a href="#你的问题" class="headerlink" title="你的问题"></a>你的问题</h2><p>在这个宁肯不吃一顿饭，不可断一小时网的时代里，我们对网络的依赖已经达到了无以复加的地步，虽然我们每天在使用网络，却并不清楚网络通讯到底是如何进行的？</p>
<p>比如，你在微信里给苦追了好久的姑娘发送了一条约会消息，她收到了，并且在微信上回复给你“不好意思，我今晚有约了”，但是这可能是个误会，你发送的消息为什么可以成功到达她的手机上，而不是被远在大洋彼岸的川普收到呢？她在手机上看到这条消息后，回复给你一条拒绝的消息，这条消息也准确无误的被你所接收，本来打算和姑娘一块看电影的计划泡汤了，虽然你这时候心情很糟，但你也无事可做，所以打算研究研究这该死的网络通讯协议。看看为什么你发给妹子的消息没有发到川普的手机上。</p>
<a id="more"></a>
<h2 id="简单分析"><a href="#简单分析" class="headerlink" title="简单分析"></a>简单分析</h2><p>我们先来看看你给姑娘发送消息这一过程，它的背后到底发生了什么。首先，你编辑了一条消息，点击了发送按钮，这时这条消息会被经过包装，然后发送至腾讯的服务器上，包装的过程中，会把发送人、接收人、消息内容等等信息整合在一起，腾讯的服务器接收的这条信息之后，对应的程序就会对这条消息进行处理计算，从而得知要把什么内容发送给什么人，然后服务器也将这一信息进行包装处理，发送出去，之后姑娘收到消息。这只是一个简单的消息传递流程，要想真正搞清楚消息是怎么发送的，还需要了解互联网通讯的原理。</p>
<h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>首先我们要知道协议是什么？其实很简单，协议其实就是一种规则。比如在社会中，我们有法律来约束每个人的行为，法律就可以看做是一种面向公民的“协议”。在互联网上我们同样需要一些规则来约束各个主机设备或程序的行为，那么这个规则就是互联网协议。接下来我们会介绍互联网分层模型，互联网的每一层都有其特定的功能，要实现这特定的功能就要有对应的协议。</p>
<h2 id="互联网分层模型"><a href="#互联网分层模型" class="headerlink" title="互联网分层模型"></a>互联网分层模型</h2><p>为了便于理解，我们一般可以将互联网通讯模型分为五层，每个层都有它自己的功能。物理层是最底层，应用层是最高层，中间分别是链路层、网络层和传输层，其每一层都是建立在上一层的基础上的。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4384107-e093ee1c413690d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="osi七层模型可理解为五层模型"></p>
<h3 id="（一）物理层"><a href="#（一）物理层" class="headerlink" title="（一）物理层"></a>（一）物理层</h3><p>你想给姑娘发送一条消息，首先你得有个手机（这TM不是废话），其次，你的手机得连上网（这TM也是废话），或许你这条消息是用电脑版的微信发送的，那无论你是插网线还是连WIFI，都需要你成功接入互联网。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4384107-e16969a740b98123.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>这些连接线路就是互联网的物理层，物理层主要功能是提供了数据传输的介质，使得电信号可以在设备之间传播，这里的电信号也可以简单的理解为0或1。</p>
<h3 id="（二）链路层"><a href="#（二）链路层" class="headerlink" title="（二）链路层"></a>（二）链路层</h3><p>物理层为我们提供了在两台设备之间传输0和1的可能，但是只是单纯的传输0和1是没有意义的。链路层的作用是将这些01信号序列化，转化为有意义的数据帧。</p>
<p>那么链路层是怎么工作的呢？它工作过程大概可以理解为三个部分，发送什么数据？发送给谁？怎么发送？</p>
<ol>
<li><p>首先需要有一个规则来定义这些01电信号，使得这些电信号变得有意义，这个规则就是<a href="https://en.wikipedia.org/wiki/Ethernet" target="_blank" rel="external">以太网协议（Ethernet）</a>，它规定了一组电信号为一个数据包，每个数据包都分标头(head)和数据(data)。标头用来存储发送人、接收人、数据类型等等，数据部分就是消息内容。这就解决了发送什么消息的问题。</p>
</li>
<li><p>定义好了数据，我们就该考虑发送给谁的问题了，每台设备都有自己的一个地址，叫做<a href="https://en.wikipedia.org/wiki/MAC_address" target="_blank" rel="external">MAC地址</a>。MAC地址在设备出厂时就已经固定了，这个地址在全世界是独一无二的，这样我们就可以通过这个地址去向目标设备发送数据。</p>
</li>
<li><p>虽然我们知道了目标设备的MAC地址，但是怎么才能把把消息准确的发送给目标设备呢？其实解决方法很简单，发送数据时，将向网络中所有设备都发送这个消息，然后每一台设备自己来判断数据标头中包含的MAC地址是否和自己的MAC地址一致，如果一致就接收这个消息，如果不一致就不接收。这种发送数据的方式叫做“广播”。通过“广播”的方式就可以把一条数据发送到指定设备上了。</p>
</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/4384107-26d4c1e46d253cfb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>好了，让我们再来看看发送数据这个过程，如我们上面所说，你想给姑娘发送一条消息，得通过通讯线缆传输0或1这种信号，然后有一种叫以太网协议的东西可以帮你把01信号转化为有意义的数据，之后你的手机向网络中所有设备发出这条消息，姑娘的手机发现这条数据是发给她的，便接受了这条数据，其他人的设备发现数据中包含的MAC地址和自己的MAC地址不符合，说明这条数据是发送给其他人的，便不接收这条数据。这样便达到了发送给姑娘消息的效果。</p>
<h3 id="（三）网络层"><a href="#（三）网络层" class="headerlink" title="（三）网络层"></a>（三）网络层</h3><p>我们知道全球的可联网设备都在一个巨型网络下，按我们上面所说，你的消息会发送给网络内所有设备，这么说来你的这条消息还是发给川普了嘛，只是人家没有接收而已。其实，并非如此，如果每发送一条消息都会发送给互联网上的所有人，那以互联网这么大的体量，早就瘫痪了。</p>
<p>实际上，“广播”的方式只能在同一子网络内发送数据，互联网是由非常多的子网络组成的巨型网络，所以你发给姑娘的消息川普是绝对收不到的。</p>
<p>看到这里你肯定已经明白了，网络层的作用是可以让数据在不同子网络之间也可以传递。最常见的网路层通讯协议就是IP协议。</p>
<h4 id="3-1-IP地址"><a href="#3-1-IP地址" class="headerlink" title="3.1 IP地址"></a>3.1 IP地址</h4><p>虽然每台设备都有自己独有的MAC地址，但是通过MAC地址我们是无法判断该设备是属于那个子网络的，所以我们引入了一种其他的地址，叫做IP地址，也称为“网址”。目前最常使用的是IPv4，是IP协议的第四版。IPv4规定网址是由32位二进制数组成，通常以四段10进制数表示，从0.0.0.0到255.255.255.255，例如：192.168.1.1就是一个IPv4地址。</p>
<h4 id="3-2-子网掩码"><a href="#3-2-子网掩码" class="headerlink" title="3.2 子网掩码"></a>3.2 子网掩码</h4><p>有了两台设备的IP地址，我们该如何判断两台设备是不是处在同一子网络下呢？这时候就需要另外一种叫做“子网掩码”的参数了，“子网掩码”同IP地址十分类似，也是由32位二进制数组成，不过它的网络部分全部为1，主机部分全部为0，那么什么是网络部分？什么是主机部分呢？</p>
<p>举例来说，IP地址为192.168.1.1，子网掩码为“255.255.255.0”，就表示此IP的前24位为网络部分，后8位为主机部分。也就是说通过“子网掩码”可以确定一个IP地址的网络部分和主机部分。那么问题就变得简单了，如果两台设备的IP地址网络部分是相同的，那么他们就处在同一子网络。</p>
<p>例如：A设备的IP地址为172.12.214.3，子网掩码为255.255.0.0，B设备的IP地址为172.12.213.1，子网掩码同为255.255.0.0，则可以判断出A设备与B设备处在同一子网络下。</p>
<h4 id="3-3-相同子网络间的数据传输"><a href="#3-3-相同子网络间的数据传输" class="headerlink" title="3.3 相同子网络间的数据传输"></a>3.3 相同子网络间的数据传输</h4><p>好了，看起来费了好大的劲来判断两台设备是不是处于同一网络下，但是相信我，费这么大功夫是绝对值得的。我们马上就可以在互联网上任意两台设备间发送数据了。首先我们要了解，我们想要发送数据，就必须知道目标设备的IP地址和MAC地址。</p>
<p>通过IP协议，我们可以判断出要传输数据的两台设备是否是在同一子网络，那现在就会有两种情况，第一种情况是，两台设备处在同一子网络下，那我们就可以利用“广播”方式去发送数据了，但是问题来了，知道目标设备的IP地址，如何获得目标的MAC地址呢？这时候ARP协议就登场了。</p>
<p>ARP协议的作用可以简单的认为是通过IP地址来获取同一子网络中设备的MAC地址，那它是如何工作的，其实也很简单，它也是通过“广播”的方式向子网络内所有设备发送一条数据包，数据包中的MAC地址填写为：FF:FF:FF:FF:FF:FF，这样当其他设备收到这条数据的时候，就会对比自身的IP与数据包中的IP是否一致，若不一致就丢弃这条数据，若一致就接收这一条数据，并汇报自己的MAC地址，这样就可以通过IP地址获取到MAC地址了。</p>
<p>现在我们就可以在两台设备（同一子网络）间通讯了。</p>
<h4 id="3-4-不同子网络间的数据传输"><a href="#3-4-不同子网络间的数据传输" class="headerlink" title="3.4 不同子网络间的数据传输"></a>3.4 不同子网络间的数据传输</h4><p>第二种情况是，要传输数据的两台设备，不在同一子网络下，我们知道，要想把数据准确发送到目标设备中，就必须知道两个地址</p>
<ul>
<li>目标设备的IP地址</li>
<li>目标设备的MAC地址</li>
</ul>
<p>但是，不同子网络间的两台设备，是无法获取到对方的MAC地址的，这时候只能将数据包发送给网关，网关通过路由协议再将数据发送到目标设备上。所以这时候需要知道的地址就变成了</p>
<ul>
<li>目标设备的IP地址</li>
<li>网关的MAC地址</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4384107-b7b59aa22644ba79.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>如图，主机2想向主机4发送一条数据，必须先将数据发送至网关A，由网关A通过路由协议查询到主机4处于子网络B，网关A会将数据发送给网关B，网关B再将数据发送给主机4，这样便完成了主机2到主机4之间的通讯。</p>
<p>至此，我们应该清楚了，在两台设备间通讯所必须的条件，首先我们需要判断两台设备是否处在同一子网络中，若在同一子网络，就可以利用ARP协议来获取MAC地址，得到目标IP和MAC地址，就可以发送数据。若不在同一子网络，则需要获取网关的MAC地址，将数据发送到网关，让网关来转发。现在我们就可以在互联网上任意两台设备间通讯了。</p>
<h3 id="（四）传输层"><a href="#（四）传输层" class="headerlink" title="（四）传输层"></a>（四）传输层</h3><p>通过上面的介绍，我们已经知道了两台设备之间是如何通讯的了，但是，当你收到姑娘回给你微信消息的同时，你的手机还在线播放着久石让的《summer》，那么问题又来了，你的手机同时接收着两种数据，那系统为什么不会把微信的数据和网易云音乐的数据搞混呢？</p>
<p>不同的应用程序在主机上发送或接收数据，都要通过不同的端口（port），以此来确定数据包是归那个应用程序所有。</p>
<p>传输层的作用就是定义了端口到端口之间的通讯，最常用的协议是TCP协议。这个协议比较复杂，它可以保证数据不会丢失。常说的“三次握手”和“四次挥手”就是指TCP协议的建立和断开，有时间的朋友可以更加深入的了解了解TCP协议。</p>
<h3 id="（五）应用层"><a href="#（五）应用层" class="headerlink" title="（五）应用层"></a>（五）应用层</h3><p>虽然各个应用程序都能拿到自己对应的数据，但是如果不对这些数据进行规范，应用程序也无法解读。所以在应用层出现很多协议，用来为应用程序提供特定的数据服务接口，这些服务包括文件传输、文件管理以及电子邮件的信息处理等。例如浏览网页需要HTTP协议、下载文件需要FTP协议，读取邮件需要POP3协议等等。</p>
<p>最后，我们在来看一张图，想一下互联网每一层都主要做了什么</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4384107-643944d1738cf417.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="数据形式"><a href="#数据形式" class="headerlink" title="数据形式"></a>数据形式</h2><p>在这个五层模型中，每一层都有其对应的数据，物理层的数据就是0和1，链路层将0和1序列化定义为“帧”，“帧”分为标头和数据两部分。网络层的数据为IP数据包，它也有头部和数据两部分，IP数据包是放在帧的数据部分中的。传输层中的TCP数据包也分为头部和数据两部分，它放在IP数据包的数据部分。应用层的数据直接放在TCP数据包的数据部分。所以最终的数据形式就变成了以下形式</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4384107-8f0893291dd251bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>分层来看的话如下</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4384107-92024db349e413f8.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这片文章只是从基础的角度简单的介绍了互联网通讯的大概原理，其中简化了很多部分，实际通讯过程要比文章所写复杂的多，要想弄清楚详细的互联网通讯过程，还需要对各个协议做更加深入的学习。文章参考了阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html" target="_blank" rel="external">互联网协议入门</a>，阮老师这两篇文章写的都是通俗易懂，是互联网协议入门的不二之选，本文若有描述不清楚的地方，大家可去阅读阮老师的互联网协议入门。本文是在初步学习了互联网协议之后，自己做的一些总结，文中若有不对之处，欢迎指正。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/06/19/5947df3d363a4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;你的问题&quot;&gt;&lt;a href=&quot;#你的问题&quot; class=&quot;headerlink&quot; title=&quot;你的问题&quot;&gt;&lt;/a&gt;你的问题&lt;/h2&gt;&lt;p&gt;在这个宁肯不吃一顿饭，不可断一小时网的时代里，我们对网络的依赖已经达到了无以复加的地步，虽然我们每天在使用网络，却并不清楚网络通讯到底是如何进行的？&lt;/p&gt;
&lt;p&gt;比如，你在微信里给苦追了好久的姑娘发送了一条约会消息，她收到了，并且在微信上回复给你“不好意思，我今晚有约了”，但是这可能是个误会，你发送的消息为什么可以成功到达她的手机上，而不是被远在大洋彼岸的川普收到呢？她在手机上看到这条消息后，回复给你一条拒绝的消息，这条消息也准确无误的被你所接收，本来打算和姑娘一块看电影的计划泡汤了，虽然你这时候心情很糟，但你也无事可做，所以打算研究研究这该死的网络通讯协议。看看为什么你发给妹子的消息没有发到川普的手机上。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="http://zsqosos.github.io/categories/program/"/>
    
    
      <category term="网络协议" scheme="http://zsqosos.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>原生js实现天气查询小应用</title>
    <link href="http://zsqosos.github.io/posts/program/20170416-weather/"/>
    <id>http://zsqosos.github.io/posts/program/20170416-weather/</id>
    <published>2017-04-16T08:55:40.000Z</published>
    <updated>2017-06-10T02:32:07.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>用原生js实现了一个简单的小应用，可以用来查询全国天气，主要实现了以下两个功能</p>
<ul>
<li>点开链接时，页面自动获取当前所在城市，并显示所在城市的天气信息</li>
<li>在搜索栏搜索要查询的城市，可显示要查询城市的天气信息</li>
</ul>
<p>页面效果如下：<br><img src="http://upload-images.jianshu.io/upload_images/4384107-de15044359c172bc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="天气查询.jpg"></p>
<h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><ul>
<li><a href="https://zsqosos.github.io/weather/">在线预览</a></li>
<li><a href="https://github.com/zsqosos/weather" target="_blank" rel="external">完整代码</a></li>
</ul>
<p>请使用高级浏览器查看，预览时若速度较慢，请耐心等待<br><a id="more"></a></p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><h4 id="1-用jsonp的方式请求天气数据"><a href="#1-用jsonp的方式请求天气数据" class="headerlink" title="1.用jsonp的方式请求天气数据"></a>1.用jsonp的方式请求天气数据</h4><p>由于现有免费天气api较少，在此推荐两个api</p>
<ul>
<li><a href="http://www.nowapi.com/" target="_blank" rel="external">nowapi</a></li>
<li><a href="http://lbsyun.baidu.com/" target="_blank" rel="external">百度地图开放平台</a></li>
</ul>
<p>这两者都是可以免费使用的，nowapi的免费天气数据可以提供未来7天天气数据，百度地图的api可以提供当前所在地理位置及当日天气详情，结合使用基本可以满足个人需求</p>
<ul>
<li><p>百度天气api测试示例：<a href="http://api.map.baidu.com/telematics/v3/weather?location=西安&amp;output=json&amp;ak=FK9mkfdQsloEngodbFl4FeY3" target="_blank" rel="external">http://api.map.baidu.com/telematics/v3/weather?location=西安&amp;output=json&amp;ak=FK9mkfdQsloEngodbFl4FeY3</a></p>
</li>
<li><p>newapi天气api测试示例：<a href="[http://api.k780.com:88/?app=weather.future&amp;weaid=1&amp;&amp;appkey=10003&amp;sign=b59bc3ef6191eb9f747dd4e83c99f2a4&amp;format=json](http://api.k780.com:88/?app=weather.future&amp;weaid=1&amp;&amp;appkey=10003&amp;sign=b59bc3ef6191eb9f747dd4e83c99f2a4&amp;format=json"><a href="http://api.k780.com:88/?app=weather.future&amp;weaid=1&amp;&amp;appkey=10003&amp;sign=b59bc3ef6191eb9f747dd4e83c99f2a4&amp;format=json" target="_blank" rel="external">http://api.k780.com:88/?app=weather.future&amp;weaid=1&amp;&amp;appkey=10003&amp;sign=b59bc3ef6191eb9f747dd4e83c99f2a4&amp;format=json</a></a>)</p>
</li>
</ul>
<p>以上地址仅供测试使用，若需使用，请单独申请key。另外，以上数据接口均支持<code>https</code>，并支持<code>jsonp</code>调用</p>
<p>jsonp方式的数据请求函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">url</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">    script.src = url;</div><div class="line">    <span class="built_in">document</span>.body.insertBefore(script, <span class="built_in">document</span>.body.firstChild);</div><div class="line">    <span class="built_in">document</span>.body.removeChild(script);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将上述天气api地址传入此函数，便可得到天气数据，对于请求所需参数及返回数据格式请参考官方api文档，在此不再赘述。采用jsonp的方式可以完美解决跨域的问题，但需注意一点，使用https协议的站点也只能调用支持https的api接口</p>
<p>返回数据如下</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4384107-d3fb5ecc7304a146.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数据.jpg"></p>
<p>返回的数据为<code>json</code>格式，由于我的chrome安装了<code>JSONview</code>插件，所以可以看到格式化后的<code>json</code>数据</p>
<h4 id="2-将返回数据展示在页面上"><a href="#2-将返回数据展示在页面上" class="headerlink" title="2.将返回数据展示在页面上"></a>2.将返回数据展示在页面上</h4><p>这一步比较简单，主要是用js操作dom，将对应的数据填在页面相应的位置上，除了文字数据外，还需对天气图标进行操作，使之与天气相对应。返回的数据中已含有天气图标url，只需根据返回数据动态改变原有<code>html</code>中<code>img</code>的<code>src</code>即可。但由于以上api所提供的天气图标太丑，所以我采用了自己的天气图标来替换</p>
<h2 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//调用jsonp函数请求当前所在城市</span></div><div class="line">jsonp(<span class="string">'https://api.map.baidu.com/api?v=2.0&amp;ak=Dv1NMU23dh1sGS9n2tUouDEYY96Dfzh3&amp;s=1&amp;callback=getCity'</span>);</div><div class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//请求天气车数据</span></div><div class="line">    btn.onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">        jsonp(createUrl()[<span class="number">0</span>]);</div><div class="line">        jsonp(createUrl()[<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCity</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">city</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">        <span class="comment">//去掉城市名后的"市"</span></div><div class="line">        <span class="keyword">var</span> city = result.name.substring(<span class="number">0</span>,result.name.length<span class="number">-1</span>);</div><div class="line">        <span class="comment">//请求当前城市的天气数据</span></div><div class="line">        jsonp(createUrl(city)[<span class="number">0</span>]);</div><div class="line">        jsonp(createUrl(city)[<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> cityName = <span class="keyword">new</span> BMap.LocalCity();</div><div class="line">    cityName.get(city);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 数据请求函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">url</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">    script.src = url;</div><div class="line">    <span class="built_in">document</span>.body.insertBefore(script, <span class="built_in">document</span>.body.firstChild);</div><div class="line">    <span class="built_in">document</span>.body.removeChild(script);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//数据请求成功回调函数，用于将获取到的数据放入页面相应位置</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getWeather</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> oSpan = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'info'</span>);</div><div class="line">    <span class="keyword">var</span> data = response.result;</div><div class="line">    oSpan[<span class="number">0</span>].innerHTML=data[<span class="number">0</span>].citynm;</div><div class="line">    oSpan[<span class="number">1</span>].innerHTML=data[<span class="number">0</span>].days;</div><div class="line">    oSpan[<span class="number">2</span>].innerHTML=data[<span class="number">0</span>].week;</div><div class="line">    oSpan[<span class="number">3</span>].innerHTML=data[<span class="number">0</span>].weather;</div><div class="line">    oSpan[<span class="number">4</span>].innerHTML=data[<span class="number">0</span>].temperature;</div><div class="line">    oSpan[<span class="number">5</span>].innerHTML=data[<span class="number">0</span>].winp;</div><div class="line">    oSpan[<span class="number">6</span>].innerHTML=data[<span class="number">0</span>].wind;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> aDiv = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'future_box'</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;aDiv.length; i++)&#123;</div><div class="line">        <span class="keyword">var</span> aSpan = aDiv[i].getElementsByClassName(<span class="string">'future_info'</span>);</div><div class="line">        aSpan[<span class="number">0</span>].innerHTML = data[i+<span class="number">1</span>].days;</div><div class="line">        aSpan[<span class="number">1</span>].innerHTML = data[i+<span class="number">1</span>].week;</div><div class="line">        aSpan[<span class="number">2</span>].innerHTML =data[i+<span class="number">1</span>].weather;</div><div class="line">        aSpan[<span class="number">3</span>].innerHTML = data[i+<span class="number">1</span>].temperature;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//根据返回数据，替换不同天气图片</span></div><div class="line">    changeImg(response);</div><div class="line">&#125;</div><div class="line"><span class="comment">//请求今日天气详细数据回调函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTodayWeather</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> oSpan = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'info'</span>);</div><div class="line">    <span class="keyword">var</span> data = response.results;</div><div class="line">    oSpan[<span class="number">7</span>].innerHTML=data[<span class="number">0</span>].pm25;</div><div class="line">    oSpan[<span class="number">8</span>].innerHTML=data[<span class="number">0</span>].index[<span class="number">4</span>].zs;</div><div class="line">    oSpan[<span class="number">9</span>].innerHTML=data[<span class="number">0</span>].index[<span class="number">1</span>].zs;</div><div class="line">    oSpan[<span class="number">10</span>].innerHTML=data[<span class="number">0</span>].index[<span class="number">2</span>].zs;</div><div class="line">    oSpan[<span class="number">11</span>].innerHTML=data[<span class="number">0</span>].index[<span class="number">0</span>].zs;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//根据获取到的数据更改页面中相应的图片</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeImg</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> firstImg = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>)[<span class="number">0</span>];</div><div class="line">    <span class="keyword">var</span> firstWeatherId=data.result[<span class="number">0</span>].weatid;</div><div class="line">    chooseImg(firstWeatherId,firstImg);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> aImg = <span class="built_in">document</span>.getElementById(<span class="string">'future_container'</span>).getElementsByTagName(<span class="string">'img'</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;aImg.length; j++)&#123;</div><div class="line">        <span class="keyword">var</span> weatherId = data.result[j+<span class="number">1</span>].weatid;</div><div class="line">        chooseImg(weatherId,aImg[j]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//选择图片</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">chooseImg</span>(<span class="params">id,index</span>)</span>&#123;</div><div class="line">    <span class="keyword">switch</span>(id)&#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'1'</span>:</div><div class="line">            index.src=<span class="string">'images/weather_icon/1.png'</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'2'</span>:</div><div class="line">            index.src=<span class="string">'images/weather_icon/2.png'</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'3'</span>:</div><div class="line">            index.src=<span class="string">'images/weather_icon/3.png'</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'4'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'5'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'6'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'8'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'9'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'10'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'11'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'12'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'13'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'20'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'22'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'23'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'24'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'25'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'26'</span>:</div><div class="line">            index.src=<span class="string">'images/weather_icon/4.png'</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'7'</span>:</div><div class="line">            index.src=<span class="string">'images/weather_icon/6.png'</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'14'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'15'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'16'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'17'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'18'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'27'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'28'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'29'</span>:</div><div class="line">            index.src=<span class="string">'images/weather_icon/5.png'</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'19'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'21'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'30'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'31'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'32'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'33'</span>:</div><div class="line">            index.src=<span class="string">'images/weather_icon/7.png'</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            index.src=<span class="string">'images/weather_icon/8.png'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//根据城市名创建请求数据及url</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createUrl</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> cityName = <span class="string">''</span>;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length == <span class="number">0</span>) &#123;</div><div class="line">        cityName = <span class="built_in">document</span>.getElementById(<span class="string">'text'</span>).value;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        cityName = <span class="built_in">arguments</span>[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> urls = []; </div><div class="line">    urls[<span class="number">0</span>] = <span class="string">'https://sapi.k780.com/?app=weather.future&amp;appkey=10003&amp;sign=b59bc3ef6191eb9f747dd4e83c99f2a4&amp;format=json&amp;jsoncallback=getWeather&amp;weaid='</span> + <span class="built_in">encodeURI</span>(cityName);</div><div class="line">    urls[<span class="number">1</span>] = <span class="string">'https://api.map.baidu.com/telematics/v3/weather?output=json&amp;ak=FK9mkfdQsloEngodbFl4FeY3&amp;callback=getTodayWeather&amp;location='</span> + <span class="built_in">encodeURI</span>(cityName);</div><div class="line">    <span class="keyword">return</span> urls;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现过程很简单，代码量也不大，有兴趣的朋友可以自己动手试试，当然，若是能给我个star就再好不过了(^_^)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;用原生js实现了一个简单的小应用，可以用来查询全国天气，主要实现了以下两个功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点开链接时，页面自动获取当前所在城市，并显示所在城市的天气信息&lt;/li&gt;
&lt;li&gt;在搜索栏搜索要查询的城市，可显示要查询城市的天气信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;页面效果如下：&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4384107-de15044359c172bc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;天气查询.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;预览&quot;&gt;&lt;a href=&quot;#预览&quot; class=&quot;headerlink&quot; title=&quot;预览&quot;&gt;&lt;/a&gt;预览&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zsqosos.github.io/weather/&quot;&gt;在线预览&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zsqosos/weather&quot;&gt;完整代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请使用高级浏览器查看，预览时若速度较慢，请耐心等待&lt;br&gt;
    
    </summary>
    
      <category term="program" scheme="http://zsqosos.github.io/categories/program/"/>
    
    
      <category term="javascript" scheme="http://zsqosos.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>三月的北京</title>
    <link href="http://zsqosos.github.io/posts/life/20170320-life/"/>
    <id>http://zsqosos.github.io/posts/life/20170320-life/</id>
    <published>2017-03-20T12:48:38.000Z</published>
    <updated>2017-06-19T14:38:48.327Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i2.muimg.com/1949/2223310502231441s.jpg" alt="春意"></p>
<p>漫天飞舞的柳絮，随着耳机里熟悉的旋律飘进了我的心。<br>初来北京，虽说正值春日，但除了每日的工作和学习，还未曾出门踏踏青。<br>我并不是一个喜欢游玩的人，但出门看到一番好景致自会让人心情大好。<br>看着眼前的场景，我想，三月的北京似乎和别处一样，但似乎又不一样。<br>玉渊潭那熙熙攘攘的赏花者和别处并没什么不同，连园子里的花也和别处一样，而这里的热闹却是别处没有的。<br>年年均有花开时，花开自会惹人赏。<br>而今旧人非今人，此花亦非旧时花。<br>我似乎来的正是时候，有幸目睹今年盛开的樱花。</p>
<a id="more"></a>
<p>三月的北京很柔弱，处处都是一副惹人怜的模样<br>路边轻摆的杨柳<br>湖上悠悠的小船<br>还有街上那美丽的姑娘</p>
<p>三月的北京也很豪壮<br>有胡同里一口京腔骂仗的少年<br>也有紫禁城宏伟壮阔的雄景<br>更有无数人为之努力的梦想</p>
<p>在这座城市里<br>每天都有许多人为了生活而奔波<br>更有人为了梦想而奋斗<br>有人在这里看到了无尽的黑暗<br>有人在这里看到了希望之光<br>我想人生的意义可能不在于得到什么，而在于做了什么<br>三月的北京是什么？<br>不是美景<br>是希望</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i2.muimg.com/1949/2223310502231441s.jpg&quot; alt=&quot;春意&quot;&gt;&lt;/p&gt;
&lt;p&gt;漫天飞舞的柳絮，随着耳机里熟悉的旋律飘进了我的心。&lt;br&gt;初来北京，虽说正值春日，但除了每日的工作和学习，还未曾出门踏踏青。&lt;br&gt;我并不是一个喜欢游玩的人，但出门看到一番好景致自会让人心情大好。&lt;br&gt;看着眼前的场景，我想，三月的北京似乎和别处一样，但似乎又不一样。&lt;br&gt;玉渊潭那熙熙攘攘的赏花者和别处并没什么不同，连园子里的花也和别处一样，而这里的热闹却是别处没有的。&lt;br&gt;年年均有花开时，花开自会惹人赏。&lt;br&gt;而今旧人非今人，此花亦非旧时花。&lt;br&gt;我似乎来的正是时候，有幸目睹今年盛开的樱花。&lt;/p&gt;
    
    </summary>
    
      <category term="life" scheme="http://zsqosos.github.io/categories/life/"/>
    
    
      <category term="杂记" scheme="http://zsqosos.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>两种最常用的Sticky footer布局方式</title>
    <link href="http://zsqosos.github.io/posts/program/20170208-stickyfooter/"/>
    <id>http://zsqosos.github.io/posts/program/20170208-stickyfooter/</id>
    <published>2017-02-08T11:22:52.000Z</published>
    <updated>2017-06-10T02:32:04.210Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Sticky-footer布局是什么？"><a href="#Sticky-footer布局是什么？" class="headerlink" title="Sticky footer布局是什么？"></a>Sticky footer布局是什么？</h2><p>我们所见到的大部分网站页面，都会把一个页面分为头部区块、内容区块和页脚区块，当头部区块和内容区块内容较少时，页脚能固定在屏幕的底部，而非随着文档流排布。当页面内容较多时，页脚能随着文档流自动撑开，显示在页面的最底部，这就是Sticky footer布局。</p>
<h2 id="图示说明"><a href="#图示说明" class="headerlink" title="图示说明"></a>图示说明</h2><ul>
<li>当内容较少时，正常的文档流效果如下图</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4384107-89d4e572ace7edaa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="正常文档流.jpg"></p>
<p>在正常的文档流中，页面内容较少时，页脚部分不是固定在视窗底部的，这时就要用到Stickyfooter布局。</p>
<a id="more"></a>
<ul>
<li>Sticky footer布局效果如下图</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4384107-bc36dd84bf9008b8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Sticky footer布局.jpg"></p>
<p>这样就符合我们的预期效果，可以看出Sticky footer布局的应用场景还是非常广泛的。</p>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="负margin布局方式"><a href="#负margin布局方式" class="headerlink" title="负margin布局方式"></a>负margin布局方式</h3><p>html代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper clearfix"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></div><div class="line">      // 这里是页面内容</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></div><div class="line">    // 这里是footer的内容</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>css代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">    <span class="attribute">min-height</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.wrapper</span> <span class="selector-class">.content</span>&#123;</div><div class="line">    <span class="attribute">padding-bottom</span>: <span class="number">50px</span>; <span class="comment">/* footer区块的高度 */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.footer</span> &#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">margin-top</span>: -<span class="number">50px</span>;  <span class="comment">/* 使footer区块正好处于content的padding-bottom位置 */</span></div><div class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">    <span class="attribute">clear</span>: both;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">content</span>: <span class="string">"."</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">clear</span>: both;</div><div class="line">    <span class="attribute">visibility</span>: hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意:<code>content</code>元素的<code>padding-bottom</code>、<code>footer</code>元素的高度以及<code>footer</code>元素的<code>margin-top</code>值必须要保持一致。</p>
</blockquote>
<p>这种负margin的布局方式，是兼容性最佳的布局方案，各大浏览器均可完美兼容，适合各种场景，但使用这种方式的前提是必须要知道<code>footer</code>元素的高度，且结构相对较复杂。</p>
<h3 id="flex布局方式"><a href="#flex布局方式" class="headerlink" title="flex布局方式"></a>flex布局方式</h3><p>html代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>这里是主要内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>这是页脚区块<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>css代码：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">    <span class="attribute">flex-direction</span>: column;</div><div class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.content</span> &#123;</div><div class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.footer</span> &#123;</div><div class="line">    <span class="attribute">flex</span>: <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这中布局方式结构简单，代码量少，也是较为推荐的布局方式。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Sticky footer布局是十分常见的一种页面布局形式，实现的手段也比较多，以上两种方法最为常用，且基本可以满足所有应用场景。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Sticky-footer布局是什么？&quot;&gt;&lt;a href=&quot;#Sticky-footer布局是什么？&quot; class=&quot;headerlink&quot; title=&quot;Sticky footer布局是什么？&quot;&gt;&lt;/a&gt;Sticky footer布局是什么？&lt;/h2&gt;&lt;p&gt;我们所见到的大部分网站页面，都会把一个页面分为头部区块、内容区块和页脚区块，当头部区块和内容区块内容较少时，页脚能固定在屏幕的底部，而非随着文档流排布。当页面内容较多时，页脚能随着文档流自动撑开，显示在页面的最底部，这就是Sticky footer布局。&lt;/p&gt;
&lt;h2 id=&quot;图示说明&quot;&gt;&lt;a href=&quot;#图示说明&quot; class=&quot;headerlink&quot; title=&quot;图示说明&quot;&gt;&lt;/a&gt;图示说明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;当内容较少时，正常的文档流效果如下图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4384107-89d4e572ace7edaa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;正常文档流.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;在正常的文档流中，页面内容较少时，页脚部分不是固定在视窗底部的，这时就要用到Stickyfooter布局。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="http://zsqosos.github.io/categories/program/"/>
    
    
      <category term="css" scheme="http://zsqosos.github.io/tags/css/"/>
    
  </entry>
  
</feed>
